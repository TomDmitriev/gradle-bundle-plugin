plugins {
    id 'eclipse'
    id 'groovy'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'com.jfrog.bintray' version '1.7.3'
}

group = 'org.dm.gradle'
version = '0.10.1-SNAPSHOT'

def compatibilityVersion = 1.8
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

repositories {
    jcenter()

    mavenCentral()

    maven { url 'http://oss.sonatype.org/content/repositories/snapshots/' }
}

sourceSets {
    integTest {
        groovy.srcDir file('src/integTest/groovy')
        resources.srcDir file('src/integTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

tasks.matching { it.name ==~ /compile\w*/ }*.options*.encoding = 'UTF-8'

dependencies {
    compile gradleApi()
    compile localGroovy()

    compile 'biz.aQute.bnd:biz.aQute.bndlib:4.2.0'

    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }

    testRuntime 'cglib:cglib-nodep:3.2.4'
}

task integTest(type: Test, dependsOn: classes) {
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    mustRunAfter test
    reports.html.destination = file("$buildDir/reports/integTests")
    reports.junitXml.destination = file("$buildDir/integTest-results")
    binResultsDir = file("${reports.junitXml.destination}/binary/integTest")
}

check.dependsOn integTest

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Bundle Plugin',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
    }
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact groovydocJar
            artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Gradle Bundle Plugin')
                root.appendNode('description', 'Gradle plugin to generate OSGI bundles.')
                root.appendNode('url', "https://github.com/TomDmitriev/${project.name}")
                root.appendNode('inceptionYear', '2014')
                def scm = root.appendNode('scm')
                scm.appendNode('url', "https://github.com/TomDmitriev/${project.name}")
                scm.appendNode('connection', "scm:https://github.com/TomDmitriev/${project.name}.git")
                scm.appendNode('developerConnection', "scm:git://github.com/TomDmitriev/${project.name}.git")
                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
                def developers = root.appendNode('developers')
                def dev = developers.appendNode('developer')
                dev.appendNode('id', 'TomDmitriev')
                dev.appendNode('name', 'Artyom Dmitriev')
                dev.appendNode('email', 'dm.artyom@gmail.com')
            }
        }
    }
}

bintray {
    user = project.properties['bintray.user.name']
    key = project.properties['bintray.api.key']

    publications = ['mavenJava']

    dryRun = false
    publish = true
    pkg {
        repo = 'gradle-plugins'
        name = 'org.dm.bundle'
        desc = 'Gradle Bundle Plugin allows you to create OSGI bundles.'
        websiteUrl = "https://github.com/TomDmitriev/${project.name}"
        issueTrackerUrl = "https://github.com/TomDmitriev/${project.name}/issues"
        vcsUrl = "https://github.com/TomDmitriev/${project.name}.git"
        licenses = ['Apache-2.0']
        labels = ['gradle', 'bnd', 'bundle', 'osgi']
        publicDownloadNumbers = true
        version {
            vcsTag = "v$project.version"
            attributes = ['gradle-plugin': "org.dm.bundle:${project.group}:${project.name}"]
            gpg {
                sign = true
                passphrase = project.properties['signing.password']
            }
        }
    }
}

pluginBundle {
    website = "https://github.com/TomDmitriev/${project.name}"
    vcsUrl = "https://github.com/TomDmitriev/${project.name}.git"
    description = 'Gradle Bundle Plugin allows you to create OSGI bundles.'
    tags = ['bnd', 'bundle', 'osgi']

    plugins {
        greetingsPlugin {
            id = 'org.dm.bundle'
            displayName = 'Gradle Bundle plugin'
        }
    }
}

eclipse.classpath.file {
    whenMerged { cp ->
        cp.entries.removeAll { (it.kind == "src") && (it.path =~ /resources/) }
    }
}

wrapper {
    gradleVersion = '4.10.2'
    distributionType = Wrapper.DistributionType.ALL
}
